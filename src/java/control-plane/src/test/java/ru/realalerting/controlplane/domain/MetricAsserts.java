package ru.realalerting.controlplane.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MetricAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetricAllPropertiesEquals(Metric expected, Metric actual) {
        assertMetricAutoGeneratedPropertiesEquals(expected, actual);
        assertMetricAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetricAllUpdatablePropertiesEquals(Metric expected, Metric actual) {
        assertMetricUpdatableFieldsEquals(expected, actual);
        assertMetricUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetricAutoGeneratedPropertiesEquals(Metric expected, Metric actual) {
        assertThat(expected)
            .as("Verify Metric auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetricUpdatableFieldsEquals(Metric expected, Metric actual) {
        assertThat(expected)
            .as("Verify Metric relevant properties")
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(
                e ->
                    assertThat(e.getCriticalAlertProducerAddress())
                        .as("check criticalAlertProducerAddress")
                        .isEqualTo(actual.getCriticalAlertProducerAddress())
            )
            .satisfies(
                e ->
                    assertThat(e.getCriticalAlertProducerPort())
                        .as("check criticalAlertProducerPort")
                        .isEqualTo(actual.getCriticalAlertProducerPort())
            )
            .satisfies(
                e ->
                    assertThat(e.getCriticalAlertProducerUri())
                        .as("check criticalAlertProducerUri")
                        .isEqualTo(actual.getCriticalAlertProducerUri())
            )
            .satisfies(
                e ->
                    assertThat(e.getCriticalAlertProducerStreamId())
                        .as("check criticalAlertProducerStreamId")
                        .isEqualTo(actual.getCriticalAlertProducerStreamId())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetricUpdatableRelationshipsEquals(Metric expected, Metric actual) {
        assertThat(expected)
            .as("Verify Metric relationships")
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()));
    }
}
