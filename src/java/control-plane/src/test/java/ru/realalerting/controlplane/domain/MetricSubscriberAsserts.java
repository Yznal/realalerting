package ru.realalerting.controlplane.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MetricSubscriberAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetricSubscriberAllPropertiesEquals(MetricSubscriber expected, MetricSubscriber actual) {
        assertMetricSubscriberAutoGeneratedPropertiesEquals(expected, actual);
        assertMetricSubscriberAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetricSubscriberAllUpdatablePropertiesEquals(MetricSubscriber expected, MetricSubscriber actual) {
        assertMetricSubscriberUpdatableFieldsEquals(expected, actual);
        assertMetricSubscriberUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetricSubscriberAutoGeneratedPropertiesEquals(MetricSubscriber expected, MetricSubscriber actual) {
        assertThat(expected)
            .as("Verify MetricSubscriber auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetricSubscriberUpdatableFieldsEquals(MetricSubscriber expected, MetricSubscriber actual) {
        assertThat(expected)
            .as("Verify MetricSubscriber relevant properties")
            .satisfies(e -> assertThat(e.getSubscriberAddress()).as("check subscriberAddress").isEqualTo(actual.getSubscriberAddress()))
            .satisfies(e -> assertThat(e.getSubscriberPort()).as("check subscriberPort").isEqualTo(actual.getSubscriberPort()))
            .satisfies(e -> assertThat(e.getSubscriberUri()).as("check subscriberUri").isEqualTo(actual.getSubscriberUri()))
            .satisfies(e -> assertThat(e.getSubscriberStreamId()).as("check subscriberStreamId").isEqualTo(actual.getSubscriberStreamId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetricSubscriberUpdatableRelationshipsEquals(MetricSubscriber expected, MetricSubscriber actual) {
        assertThat(expected)
            .as("Verify MetricSubscriber relationships")
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()))
            .satisfies(e -> assertThat(e.getMetric()).as("check metric").isEqualTo(actual.getMetric()));
    }
}
