application {
    config {
        // Application name
        baseName ControlPlane
        // Package names
        packageName ru.realalerting.controlplane
        // App types
        applicationType monolith
        // The port number
        serverPort 8080
        buildTool maven
        databaseType sql
        languages [en, ru]
        prodDatabaseType postgresql
    }
    entities *
}

enum MetricType {
    INT, DOUBLE
      /** возможно нужно не по типам, а по способу взаимодействия
      * счетчик (может идти только вврех),
      * числовой (вверх и вниз)
      * показатель (дробное число - значение чего-то)
      * и т.д. **/
  }

enum AlertType {
  	CRITICAL, REGULAR
}

entity MetricMeta {
    label01 String
    // ....
    label256 String
}

entity Client {
    protocolProducerAddress String
    protocolProducerPort Integer
    protocolProducerUri String
    protocolProducerStreamId Integer
    
    protocolSubscriberAddress String
    protocolSubscriberPort Integer
    protocolSubscriberUri String
    protocolSubscriberStreamId Integer
    
    metricProducerAddress String
    metricProducerPort Integer
    metricProducerUri String
    metricProducerStreamId Integer
}

entity MetricTagsValue {
    value01 String
    // ....
    value256 String
}

entity Tenant {
    name String
    description String
}

entity Metric {
    type MetricType required
    name String
    description String
    
    criticalAlertProducerAddress String
    criticalAlertProducerPort Integer
    criticalAlertProducerUri String
    criticalAlertProducerStreamId Integer
}

entity RealAlert {
    type AlertType required
    name String
    description String
    conf String
    
}

entity AlertSubscriber {
    subscriberAddress String
    subscriberPort Integer
    subscriberUri String
    subscriberStreamId Integer
}

entity MetricSubscriber {
    subscriberAddress String
    subscriberPort Integer
    subscriberUri String
    subscriberStreamId Integer
}


relationship OneToOne {
    MetricMeta{tenant required} to Tenant
}

relationship OneToMany {
    Tenant to Client{tenant required}
    Tenant to MetricTagsValue{tenant required}
}

relationship OneToMany {
     Client to Metric{client required}
     Client to MetricSubscriber{client required}
     Client to RealAlert{client required}
     Client to AlertSubscriber{client required}
}

relationship OneToOne {
    MetricTagsValue{metric required} to Metric
}

relationship OneToMany {
    Metric to RealAlert{metric required}
    Metric to MetricSubscriber{metric required}
}

relationship OneToMany {
    RealAlert to AlertSubscriber{realAlert required}
}
